{"version":3,"file":"harvester-1.6.0.umd.min.431.js","mappings":"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","sources":["webpack://harvester-1.6.0/./mixins/harvester-vm/impl.js","webpack://harvester-1.6.0/./mixins/harvester-vm/index.js"],"sourcesContent":["import YAML from 'yaml';\nimport jsyaml from 'js-yaml';\nimport isEqual from 'lodash/isEqual';\nimport { clone } from '@shell/utils/object';\nimport { SECRET } from '@shell/config/types';\nimport { HCI as HCI_ANNOTATIONS } from '@pkg/harvester/config/labels-annotations';\nimport { HCI } from '../../types';\nimport { parseVolumeClaimTemplates } from '../../utils/vm';\nimport { OS } from './index';\n\nexport const QGA_JSON = {\n  package_update: true,\n  packages:       ['qemu-guest-agent'],\n  runcmd:         [\n    [\n      'systemctl',\n      'enable',\n      '--now',\n      'qemu-guest-agent.service'\n    ]\n  ]\n};\n\nexport const QGA_MAP = { default: 'qemu-guest-agent.service' };\n\nexport const USB_TABLET = [{\n  bus:  'usb',\n  name: 'tablet',\n  type: 'tablet'\n}];\n\nexport const SSH_EXISTING_TYPE = {\n  EXISTING_ALL:             'EXISTING_ALL',\n  EXISTING_ONLY_ANNOTATION: 'EXISTING_ANNOTATION',\n  EXISTING_ONLY_CLOUD:      'EXISTING_CLOUD',\n};\n\nexport default {\n  methods: {\n    hasCloudConfigComment(userScript) {\n      // Check that userData contains: #cloud-config\n      const userDataDoc = userScript ? YAML.parseDocument(userScript) : YAML.parseDocument({});\n      const items = userDataDoc?.contents?.items || [];\n\n      let exist = false;\n\n      if (userDataDoc?.comment === 'cloud-config' || userDataDoc?.comment?.includes('cloud-config\\n')) {\n        exist = true;\n      }\n\n      if (userDataDoc?.commentBefore === 'cloud-config' || userDataDoc?.commentBefore?.includes('cloud-config\\n')) {\n        exist = true;\n      }\n\n      items.map((item) => {\n        const key = item.key;\n\n        if (key?.commentBefore === 'cloud-config' || key?.commentBefore?.includes('cloud-config\\n')) {\n          exist = true;\n        }\n      });\n\n      return exist;\n    },\n\n    getSSHValue(id) {\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const sshs = this.$store.getters[`${ inStore }/all`](HCI.SSH) || [];\n\n      return sshs.find( (O) => O.id === id)?.spec?.publicKey || undefined;\n    },\n\n    getOsType(vm) {\n      return vm.metadata?.labels?.[HCI_ANNOTATIONS.OS];\n    },\n\n    getMatchQGA(osType) {\n      const _QGA_JSON = clone(QGA_JSON);\n      let hasCustomQGA = false;\n\n      OS.forEach((O) => {\n        if (O.match) {\n          hasCustomQGA = O.match.find((type) => type === osType);\n        }\n      });\n\n      if (hasCustomQGA) {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP[osType];\n      } else {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['default'];\n      }\n\n      return _QGA_JSON;\n    },\n\n    getSimilarRuncmd(osType) {\n      const _QGA_JSON = clone(QGA_JSON);\n\n      if (osType === 'openSUSE') {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['default'];\n      } else {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['suse'];\n      }\n\n      return _QGA_JSON.runcmd[0];\n    },\n\n    hasInstallAgent(userScript, osType, oldValue) {\n      let dataFormat = {};\n      const _QGA_JSON = this.getMatchQGA(osType);\n\n      try {\n        dataFormat = jsyaml.load(userScript) || {};\n      } catch (e) {\n        new Error('Function(hasInstallAgent) error');\n\n        return oldValue;\n      }\n\n      return dataFormat?.packages?.includes('qemu-guest-agent') && !!dataFormat?.runcmd?.find( (S) => Array.isArray(S) && S.join('-') === _QGA_JSON.runcmd[0].join('-'));\n    },\n\n    isInstallUSBTablet(spec) {\n      const inputs = spec?.template?.spec?.domain?.devices?.inputs;\n\n      if (Array.isArray(inputs)) {\n        return !!inputs.find((O) => {\n          return isEqual(O, USB_TABLET[0]);\n        });\n      } else {\n        return false;\n      }\n    },\n\n    isEfiEnabled(spec) {\n      return !!(spec?.template?.spec?.domain?.firmware?.bootloader?.efi);\n    },\n\n    isTpmEnabled(spec) {\n      return !!spec?.template?.spec?.domain?.devices?.tpm;\n    },\n\n    isTPMPersistentStateEnabled(spec) {\n      return !!spec?.template?.spec?.domain?.devices?.tpm?.persistent;\n    },\n\n    isEFIPersistentStateEnabled(spec) {\n      return !!spec?.template?.spec?.domain?.firmware?.bootloader?.efi?.persistent;\n    },\n\n    isSecureBoot(spec) {\n      return !!spec?.template?.spec?.domain?.firmware?.bootloader?.efi?.secureBoot;\n    },\n\n    isCpuPinning(spec) {\n      return !!spec?.template?.spec?.domain?.cpu?.dedicatedCpuPlacement;\n    },\n\n    getCloudInitNoCloud(spec) {\n      const secret = this.getSecret(spec);\n      let userData = secret?.decodedData?.userdata;\n      let networkData = secret?.decodedData?.networkdata;\n\n      const cloudInitNoCloud = spec?.template?.spec?.volumes?.find( (V) => {\n        return V.name === 'cloudinitdisk';\n      })?.cloudInitNoCloud || {};\n\n      // If the value is not found inside the secret, the data may be written directly in the yaml\n      if (cloudInitNoCloud?.userData) {\n        userData = cloudInitNoCloud.userData;\n        this.saveUserDataAsClearText = true;\n      }\n\n      if (cloudInitNoCloud?.networkData) {\n        networkData = cloudInitNoCloud.networkData;\n        this.saveNetworkDataAsClearText = true;\n      }\n\n      return { userData, networkData };\n    },\n\n    getSecret(spec) {\n      const cloudInitNoCloud = spec?.template?.spec?.volumes?.find( (V) => {\n        return V.name === 'cloudinitdisk';\n      })?.cloudInitNoCloud || {};\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const secrets = this.$store.getters[`${ inStore }/all`](SECRET) || [];\n\n      const secretName = cloudInitNoCloud?.secretRef?.name || cloudInitNoCloud?.networkDataSecretRef?.name;\n\n      const secret = secrets.find((s) => s.metadata.name === secretName);\n\n      return secret;\n    },\n\n    getAccessCredentials(spec) {\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const secrets = this.$store.getters[`${ inStore }/all`](SECRET) || [];\n      const credentials = spec?.template?.spec?.accessCredentials || [];\n      const annotations = JSON.parse(spec.template.metadata?.annotations?.[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_NAMES] || '[]');\n\n      return credentials.map((c) => {\n        const source = !!c.userPassword ? 'userPassword' : 'sshPublicKey';\n        const secretName = c[source]?.source?.secret?.secretName;\n        const secretRef = secrets.find((s) => s.metadata.name === secretName);\n        const out = {\n          source, username: '', newPassword: '', users: [], sshkeys: [], secretName, secretRef\n        };\n\n        if (!secretRef) {\n          out.secretRef = undefined;\n        } else if (source === 'userPassword') {\n          const username = Object.keys(secretRef?.data)[0];\n          const newPassword = secretRef.decodedData[username];\n\n          out.username = username;\n          out.newPassword = newPassword;\n        } else {\n          const users = c[source].propagationMethod.qemuGuestAgent.users;\n          const sshkeys = annotations?.[secretName];\n\n          out.users = users;\n          out.sshkeys = sshkeys;\n        }\n\n        return out;\n      });\n    },\n\n    getRootImageId(vm) {\n      const volumes = parseVolumeClaimTemplates(vm);\n\n      return volumes?.[0]?.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID] || '';\n    },\n\n    getSSHFromAnnotation(spec) {\n      const ids = spec?.template?.metadata?.annotations?.[HCI_ANNOTATIONS.SSH_NAMES] || '[]';\n\n      return JSON.parse(ids);\n    },\n\n    convertToJson(script = '') {\n      let out = {};\n\n      try {\n        out = jsyaml.load(script);\n      } catch (e) {\n        new Error('Function(convertToJson) error');\n      }\n\n      return out;\n    },\n\n    getSSHFromUserData(userData) {\n      return this.convertToJson(userData)?.ssh_authorized_keys || [];\n    },\n\n    compareSSHValue(a = '', b = '') {\n      const r = /(\\r\\n\\t|\\n|\\r\\t)|(\\s*)/gm;\n\n      return a.replace(r, '') === b.replace(r, '');\n    },\n\n    mergeAllSSHs(spec) {\n      const keys = this.getSSHFromAnnotation(spec);\n      const { userScript: userData } = this.getCloudInitNoCloud(spec);\n\n      if (!keys?.length < 0 && !userData) {\n        return [];\n      }\n\n      let out = [];\n\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const allSSHs = this.$store.getters[`${ inStore }/all`](HCI.SSH) || [];\n\n      out = (keys || []).map((id) => {\n        const hasSSHResource = allSSHs.find((ssh) => ssh.id === id);\n\n        if (hasSSHResource) {\n          return {\n            id:   hasSSHResource.id,\n            data: hasSSHResource,\n            type: SSH_EXISTING_TYPE.EXISTING_ALL\n          };\n        } else {\n          return {\n            id,\n            data: id,\n            type: SSH_EXISTING_TYPE.EXISTING_ONLY_ANNOTATION\n          };\n        }\n      });\n\n      const _userDataSSH = this.getSSHFromUserData(userData);\n\n      _userDataSSH.map( (sshValue) => {\n        const hasSSHResource = allSSHs.find((ssh) => this.compareSSHValue(sshValue, ssh.spec?.publicKey));\n\n        if (hasSSHResource && !out.find((O) => O.id === hasSSHResource.id)) {\n          out.push({\n            id:   hasSSHResource.id,\n            data: hasSSHResource,\n            type: SSH_EXISTING_TYPE.EXISTING_ALL\n          });\n        } else if (!hasSSHResource) {\n          out.push({\n            id:   'Unknown',\n            data: sshValue,\n            type: SSH_EXISTING_TYPE.EXISTING_ONLY_CLOUD\n          });\n        }\n      });\n\n      return out;\n    },\n  },\n};\n","import YAML from 'yaml';\nimport jsyaml from 'js-yaml';\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport difference from 'lodash/difference';\nimport { sortBy } from '@shell/utils/sort';\nimport { set } from '@shell/utils/object';\nimport { getVmCPUMemoryValues } from '../../utils/cpuMemory';\nimport { allHash } from '@shell/utils/promise';\nimport { randomStr } from '@shell/utils/string';\nimport { base64Decode } from '@shell/utils/crypto';\nimport { formatSi, parseSi } from '@shell/utils/units';\nimport { _CLONE, _CREATE, _VIEW } from '@shell/config/query-params';\nimport {\n  PV, PVC, STORAGE_CLASS, NODE, SECRET, CONFIG_MAP, NETWORK_ATTACHMENT, NAMESPACE, LONGHORN\n} from '@shell/config/types';\nimport { HOSTNAME } from '@shell/config/labels-annotations';\nimport { HCI as HCI_ANNOTATIONS } from '@pkg/harvester/config/labels-annotations';\nimport { uniq } from '@shell/utils/array';\nimport {\n  ADD_ONS, SOURCE_TYPE, ACCESS_CREDENTIALS, maintenanceStrategies, runStrategies\n} from '../../config/harvester-map';\nimport { HCI_SETTING } from '../../config/settings';\nimport { HCI } from '../../types';\nimport { parseVolumeClaimTemplates } from '../../utils/vm';\nimport impl, { QGA_JSON, USB_TABLET } from './impl';\nimport { GIBIBYTE } from '../../utils/unit';\nimport { VOLUME_MODE } from '@pkg/harvester/config/types';\n\nconst LONGHORN_V2_DATA_ENGINE = 'longhorn-system/v2-data-engine';\n\nexport const MANAGEMENT_NETWORK = 'management Network';\n\nexport const OS = [{\n  label: 'Windows',\n  value: 'windows'\n}, {\n  label: 'Linux',\n  value: 'linux'\n}, {\n  label: 'SUSE Linux Enterprise',\n  value: 'SLEs'\n}, {\n  label: 'Debian',\n  value: 'debian'\n}, {\n  label: 'Fedora',\n  value: 'fedora'\n}, {\n  label: 'Gentoo',\n  value: 'gentoo'\n}, {\n  label: 'Oracle',\n  value: 'oracle'\n}, {\n  label: 'Red Hat',\n  match: ['redhat', 'rhel'],\n  value: 'redhat'\n}, {\n  label: 'openSUSE',\n  value: 'openSUSE',\n}, {\n  label: 'Ubuntu',\n  value: 'ubuntu'\n}, {\n  label: 'Other Linux',\n  match: ['centos'],\n  value: 'otherLinux'\n}];\n\nexport const CD_ROM = 'cd-rom';\nexport const HARD_DISK = 'disk';\n\nexport default {\n  mixins: [impl],\n\n  props: {\n    value: {\n      type:     Object,\n      required: true,\n    },\n\n    resourceType: {\n      type:    String,\n      default: ''\n    }\n  },\n\n  async fetch() {\n    const inStore = this.$store.getters['currentProduct'].inStore;\n    const hash = {\n      pvs:               this.$store.dispatch(`${ inStore }/findAll`, { type: PV }),\n      pvcs:              this.$store.dispatch(`${ inStore }/findAll`, { type: PVC }),\n      storageClasses:    this.$store.dispatch(`${ inStore }/findAll`, { type: STORAGE_CLASS }),\n      sshs:              this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.SSH }),\n      settings:          this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.SETTING }),\n      images:            this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.IMAGE }),\n      versions:          this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM_VERSION }),\n      templates:         this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM_TEMPLATE }),\n      networkAttachment: this.$store.dispatch(`${ inStore }/findAll`, { type: NETWORK_ATTACHMENT }),\n      vmis:              this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VMI }),\n      vmims:             this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VMIM }),\n      vms:               this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM }),\n      secrets:           this.$store.dispatch(`${ inStore }/findAll`, { type: SECRET }),\n      addons:            this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.ADD_ONS }),\n      longhornV2Engine:  this.$store.dispatch(`${ inStore }/find`, { type: LONGHORN.SETTINGS, id: LONGHORN_V2_DATA_ENGINE }),\n    };\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](NODE)) {\n      hash.nodes = this.$store.dispatch(`${ inStore }/findAll`, { type: NODE });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](HCI.CLUSTER_NETWORK)) {\n      hash.clusterNetworks = this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.CLUSTER_NETWORK });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](HCI.VLAN_CONFIG)) {\n      hash.clusterNetworks = this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VLAN_CONFIG });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](LONGHORN.VOLUMES)) {\n      hash.longhornVolumes = this.$store.dispatch(`${ inStore }/findAll`, { type: LONGHORN.VOLUMES });\n    }\n\n    const res = await allHash(hash);\n\n    const hasPCISchema = !!this.$store.getters[`${ inStore }/schemaFor`](HCI.PCI_DEVICE);\n    const hasSRIOVGPUSchema = !!this.$store.getters[`${ inStore }/schemaFor`](HCI.SR_IOVGPU_DEVICE);\n\n    const enabledAddons = res.addons.reduce((acc, addon) => ({ ...acc, [addon.name]: addon.spec?.enabled }), {});\n\n    this.enabledPCI = hasPCISchema && enabledAddons[ADD_ONS.PCI_DEVICE_CONTROLLER];\n    this.enabledSriovgpu = hasSRIOVGPUSchema && enabledAddons[ADD_ONS.PCI_DEVICE_CONTROLLER] && enabledAddons[ADD_ONS.NVIDIA_DRIVER_TOOLKIT_CONTROLLER];\n  },\n\n  data() {\n    const isClone = this.realMode === _CLONE;\n\n    return {\n      OS,\n      isClone,\n      showYaml:                      false,\n      spec:                          null,\n      osType:                        'linux',\n      sshKey:                        [],\n      maintenanceStrategies,\n      maintenanceStrategy:           'Migrate',\n      runStrategies,\n      runStrategy:                   'RerunOnFailure',\n      installAgent:                  true,\n      hasCreateVolumes:              [],\n      installUSBTablet:              true,\n      networkScript:                 '',\n      userScript:                    '',\n      imageId:                       '',\n      diskRows:                      [],\n      networkRows:                   [],\n      machineType:                   '',\n      machineTypes:                  [],\n      secretName:                    '',\n      secretRef:                     null,\n      showAdvanced:                  false,\n      deleteAgent:                   true,\n      memory:                        null,\n      cpu:                           '',\n      maxMemory:                     null,\n      maxCpu:                        '',\n      cpuMemoryHotplugEnabled:       false,\n      reservedMemory:                null,\n      accessCredentials:             [],\n      efiEnabled:                    false,\n      tpmEnabled:                    false,\n      tpmPersistentStateEnabled:     false,\n      efiPersistentStateEnabled:     false,\n      secureBoot:                    false,\n      userDataTemplateId:            '',\n      saveUserDataAsClearText:       false,\n      saveNetworkDataAsClearText:    false,\n      enabledPCI:                    false,\n      enabledSriovgpu:               false,\n      immutableMode:                 this.realMode === _CREATE ? _CREATE : _VIEW,\n      terminationGracePeriodSeconds: '',\n      cpuPinning:                    false,\n    };\n  },\n\n  computed: {\n    inStore() {\n      return this.$store.getters['currentProduct'].inStore;\n    },\n\n    images() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.IMAGE);\n    },\n\n    versions() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.VM_VERSION);\n    },\n\n    templates() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.VM_TEMPLATE);\n    },\n\n    pvcs() {\n      return this.$store.getters[`${ this.inStore }/all`](PVC);\n    },\n\n    secrets() {\n      return this.$store.getters[`${ this.inStore }/all`](SECRET);\n    },\n\n    filteredNamespaces() {\n      return this.$store.getters['harvester/all'](NAMESPACE).filter((namespace) => !namespace.isSystem);\n    },\n\n    nodes() {\n      return this.$store.getters['harvester/all'](NODE);\n    },\n\n    nodesIdOptions() {\n      const nodes = this.$store.getters[`${ this.inStore }/all`](NODE);\n\n      const networkNames = this.networkRows.map((n) => n.networkName);\n      const vmNetworks = this.$store.getters[`${ this.inStore }/all`](NETWORK_ATTACHMENT);\n      const selectedVMNetworks = networkNames.map((name) => vmNetworks.find((n) => n.id === name)).filter((n) => n?.id);\n      const clusterNetworks = uniq(selectedVMNetworks.map((n) => n.clusterNetworkResource?.id));\n\n      return nodes.filter((N) => !N.isUnSchedulable && N.isEtcd !== 'true').map((node) => {\n        const requireLabelKeys = [];\n        let isNetworkSchedule = true;\n\n        if (clusterNetworks.length > 0) {\n          clusterNetworks.map((clusterNetwork) => {\n            requireLabelKeys.push(`network.harvesterhci.io/${ clusterNetwork }`);\n          });\n        }\n\n        requireLabelKeys.map((requireLabelKey) => {\n          if (node.metadata?.labels?.[requireLabelKey] !== 'true') {\n            isNetworkSchedule = false;\n          }\n        });\n\n        return {\n          label:    isNetworkSchedule ? node.nameDisplay : `${ node.nameDisplay } (${ this.t('harvester.virtualMachine.scheduling.networkNotSupport') })`,\n          value:    node.id,\n          disabled: !isNetworkSchedule,\n        };\n      });\n    },\n\n    storageClassSetting() {\n      try {\n        const storageClassValue = this.$store.getters[`${ this.inStore }/all`](HCI.SETTING).find( (O) => O.id === HCI_SETTING.DEFAULT_STORAGE_CLASS)?.value;\n\n        return JSON.parse(storageClassValue);\n      } catch (e) {\n        return {};\n      }\n    },\n\n    customVolumeMode() {\n      return this.storageClassSetting.volumeMode || VOLUME_MODE.BLOCK;\n    },\n\n    customAccessMode() {\n      return this.storageClassSetting.accessModes || 'ReadWriteMany';\n    },\n\n    isWindows() {\n      return this.osType === 'windows';\n    },\n\n    needNewSecret() {\n      // When creating a template it is always necessary to create a new secret.\n      return this.showYaml ? false : this.resourceType === HCI.VM_VERSION || this.isCreate;\n    },\n\n    defaultTerminationSetting() {\n      const setting = this.$store.getters[`${ this.inStore }/all`](HCI.SETTING).find( (O) => O.id === HCI_SETTING.VM_TERMINATION_PERIOD) || {};\n\n      return Number(setting?.value || setting?.default);\n    },\n\n    affinityLabels() {\n      return {\n        namespaceInputLabel:      this.t('harvester.virtualMachine.affinity.namespaces.label'),\n        namespaceSelectionLabels: [\n          this.t('harvester.virtualMachine.affinity.thisPodNamespace'),\n          this.t('workload.scheduling.affinity.allNamespaces'),\n          this.t('harvester.virtualMachine.affinity.matchExpressions.inNamespaces')\n        ],\n        addLabel:               this.t('harvester.virtualMachine.affinity.addLabel'),\n        topologyKeyPlaceholder: this.t('harvester.virtualMachine.affinity.topologyKey.placeholder')\n      };\n    },\n  },\n\n  async created() {\n    await this.$store.dispatch(`${ this.inStore }/findAll`, { type: SECRET });\n\n    if (this.value.vmMachineTypesFeatureEnabled) {\n      try {\n        const url = this.$store.getters['harvester-common/getHarvesterClusterUrl']('v1/harvester/clusters/local?link=machineTypes');\n        const machineTypes = await this.$store.dispatch('harvester/request', { url });\n\n        this.machineTypes = machineTypes;\n      } catch (err) {\n        this.machineTypes = [''];\n      }\n    } else {\n      this.machineTypes = [''];\n    }\n\n    this.getInitConfig({ value: this.value, init: this.isCreate });\n  },\n\n  methods: {\n    getInitConfig(config) {\n      const {\n        value, existUserData, fromTemplate = false, init = false\n      } = config;\n\n      const vm = this.resourceType === HCI.VM ? value : this.resourceType === HCI.BACKUP ? this.value.status?.source : value.spec.vm;\n      const volumeBackups = this.resourceType === HCI.BACKUP ? this.value.status?.volumeBackups : null;\n\n      const spec = vm?.spec;\n\n      if (!spec) {\n        return;\n      }\n      const resources = spec.template.spec.domain.resources;\n\n      // If the user is created via yaml, there may be no \"resources.limits\": kubectl apply -f https://kubevirt.io/labs/manifests/vm.yaml\n      if (!resources?.limits || (resources?.limits && !resources?.limits?.memory && resources?.limits?.memory !== null)) {\n        spec.template.spec.domain.resources = {\n          ...spec.template.spec.domain.resources,\n          limits: {\n            ...spec.template.spec.domain.resources.limits,\n            memory: spec.template.spec.domain.resources.requests.memory\n          }\n        };\n      }\n\n      if (!vm.metadata.labels) {\n        vm.metadata.labels = {};\n      }\n      const maintenanceStrategy = vm.metadata.labels?.[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY] || 'Migrate';\n\n      const runStrategy = spec.runStrategy || 'RerunOnFailure';\n      const machineType = spec.template.spec.domain?.machine?.type || this.machineTypes[0];\n\n      const {\n        cpu, memory, maxCpu, maxMemory, isHotplugEnabled\n      } = getVmCPUMemoryValues(vm);\n      const cpuMemoryHotplugEnabled = isHotplugEnabled;\n\n      const reservedMemory = vm.metadata?.annotations?.[HCI_ANNOTATIONS.VM_RESERVED_MEMORY];\n      const terminationGracePeriodSeconds = spec.template.spec?.terminationGracePeriodSeconds || this.defaultTerminationSetting;\n\n      const sshKey = this.getSSHFromAnnotation(spec) || [];\n\n      const imageId = this.getRootImageId(vm) || '';\n      const diskRows = this.getDiskRows(vm, volumeBackups);\n\n      const networkRows = this.getNetworkRows(vm, { fromTemplate, init });\n      const hasCreateVolumes = this.getHasCreatedVolumes(spec) || [];\n\n      let { userData = undefined, networkData = undefined } = this.getCloudInitNoCloud(spec);\n\n      if (this.resourceType === HCI.BACKUP) {\n        const secretBackups = this.value.status?.secretBackups;\n\n        if (secretBackups) {\n          const secretNetworkData = secretBackups[0]?.data?.networkdata || '';\n          const secretUserData = secretBackups[0]?.data?.userdata || '';\n\n          userData = base64Decode(secretUserData);\n          networkData = base64Decode(secretNetworkData);\n        }\n      }\n      const osType = this.getOsType(vm) || 'linux';\n\n      userData = this.isCreate && !existUserData && !this.isClone ? this.getInitUserData({ osType }) : userData;\n\n      const installUSBTablet = this.isInstallUSBTablet(spec);\n      const installAgent = this.hasInstallAgent(userData, osType, true);\n      const efiEnabled = this.isEfiEnabled(spec);\n      const tpmEnabled = this.isTpmEnabled(spec);\n      const tpmPersistentStateEnabled = this.isTPMPersistentStateEnabled(spec);\n      const efiPersistentStateEnabled = this.isEFIPersistentStateEnabled(spec);\n      const secureBoot = this.isSecureBoot(spec);\n      const cpuPinning = this.isCpuPinning(spec);\n\n      const secretRef = this.getSecret(spec);\n      const accessCredentials = this.getAccessCredentials(spec);\n\n      if (Object.prototype.hasOwnProperty.call(spec, 'running')) {\n        delete spec.running;\n        spec.runStrategy = 'RerunOnFailure';\n      }\n\n      this['spec'] = spec;\n      this['maintenanceStrategy'] = maintenanceStrategy;\n      this['runStrategy'] = runStrategy;\n      this['secretRef'] = secretRef;\n      this['accessCredentials'] = accessCredentials;\n      this['userScript'] = userData;\n      this['networkScript'] = networkData;\n\n      this['sshKey'] = sshKey;\n      this['osType'] = osType;\n      this['installAgent'] = installAgent;\n\n      this['cpu'] = cpu;\n      this['memory'] = memory;\n      this['maxCpu'] = maxCpu;\n      this['maxMemory'] = maxMemory;\n      this['cpuMemoryHotplugEnabled'] = cpuMemoryHotplugEnabled;\n      this['reservedMemory'] = reservedMemory;\n      this['machineType'] = machineType;\n      this['terminationGracePeriodSeconds'] = terminationGracePeriodSeconds;\n\n      this['installUSBTablet'] = installUSBTablet;\n      this['efiEnabled'] = efiEnabled;\n      this['efiPersistentStateEnabled'] = efiPersistentStateEnabled;\n      this['tpmEnabled'] = tpmEnabled;\n      this['tpmPersistentStateEnabled'] = tpmPersistentStateEnabled;\n      this['secureBoot'] = secureBoot;\n      this['cpuPinning'] = cpuPinning;\n\n      this['hasCreateVolumes'] = hasCreateVolumes;\n      this['networkRows'] = networkRows;\n      this['imageId'] = imageId;\n\n      this['diskRows'] = diskRows;\n\n      this.refreshYamlEditor();\n    },\n\n    getDiskRows(vm, volBackups) {\n      const namespace = vm.metadata.namespace;\n      const _volumes = vm.spec.template.spec.volumes || [];\n      const _disks = vm.spec.template.spec.domain.devices.disks || [];\n      const _volumeClaimTemplates = parseVolumeClaimTemplates(vm);\n\n      let out = [];\n\n      if (_disks.length === 0) {\n        let bus = 'virtio';\n        let type = HARD_DISK;\n        let size = '10Gi';\n\n        const imageResource = this.images.find( (I) => this.imageId === I.id);\n\n        const isIsoImage = /iso$/i.test(imageResource?.imageSuffix);\n        const imageSize = Math.max(imageResource?.status?.size, imageResource?.status?.virtualSize);\n        const isEncrypted = imageResource?.isEncrypted || false;\n        const volumeBackups = volBackups?.find((vBackup) => vBackup.volumeName === 'disk-0') || null ;\n\n        if (isIsoImage) {\n          bus = 'sata';\n          type = CD_ROM;\n        }\n\n        if (imageSize) {\n          let imageSizeGiB = Math.ceil(imageSize / 1024 / 1024 / 1024);\n\n          if (!isIsoImage) {\n            imageSizeGiB = Math.max(imageSizeGiB, 10);\n          }\n          size = `${ imageSizeGiB }${ GIBIBYTE }`;\n        }\n\n        out.push({\n          id:               randomStr(5),\n          source:           SOURCE_TYPE.IMAGE,\n          name:             'disk-0',\n          accessMode:       'ReadWriteMany', // root disk only support LHv1 volume, should be RWX\n          bus,\n          volumeName:       '',\n          size,\n          type,\n          storageClassName: '',\n          image:            this.imageId,\n          volumeMode:       VOLUME_MODE.BLOCK,\n          isEncrypted,\n          volumeBackups,\n        });\n      } else {\n        out = _disks.map( (DISK, index) => {\n          const volume = _volumes.find( (V) => V.name === DISK.name );\n\n          let size = '';\n          let image = '';\n          let source = '';\n          let realName = '';\n          let container = '';\n          let volumeName = '';\n          let accessMode = '';\n          let volumeMode = '';\n          let storageClassName = '';\n          let hotpluggable = false;\n          let dataSource = null;\n\n          const type = DISK?.cdrom ? CD_ROM : DISK?.disk ? HARD_DISK : '';\n\n          if (volume?.containerDisk) { // SOURCE_TYPE.CONTAINER\n            source = SOURCE_TYPE.CONTAINER;\n            container = volume.containerDisk.image;\n          }\n\n          if (volume.persistentVolumeClaim && volume.persistentVolumeClaim?.claimName) {\n            volumeName = volume.persistentVolumeClaim.claimName;\n            const DVT = _volumeClaimTemplates.find( (T) => T.metadata.name === volumeName);\n\n            realName = volumeName;\n            // If the DVT can be found, it cannot be an existing volume\n            if (DVT) {\n              // has annotation (HCI_ANNOTATIONS.IMAGE_ID) => SOURCE_TYPE.IMAGE\n              if (DVT.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID] !== undefined) {\n                image = DVT.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID];\n                source = SOURCE_TYPE.IMAGE;\n              } else {\n                source = SOURCE_TYPE.NEW;\n              }\n\n              const dataVolumeSpecPVC = DVT?.spec || {};\n\n              volumeMode = dataVolumeSpecPVC?.volumeMode;\n              accessMode = dataVolumeSpecPVC?.accessModes?.[0];\n              size = dataVolumeSpecPVC?.resources?.requests?.storage || '10Gi';\n              storageClassName = dataVolumeSpecPVC?.storageClassName;\n              dataSource = dataVolumeSpecPVC?.dataSource;\n            } else {\n              // SOURCE_TYPE.ATTACH_VOLUME\n              // Compatible with VMS that have been created before, Because they're not saved in the annotation\n              const allPVCs = this.$store.getters['harvester/all'](PVC);\n              const pvcResource = allPVCs.find( (O) => O.id === `${ namespace }/${ volume?.persistentVolumeClaim?.claimName }`);\n\n              source = SOURCE_TYPE.ATTACH_VOLUME;\n              accessMode = pvcResource?.spec?.accessModes?.[0] || 'ReadWriteMany';\n              size = pvcResource?.spec?.resources?.requests?.storage || '10Gi';\n              storageClassName = pvcResource?.spec?.storageClassName;\n              volumeMode = pvcResource?.spec?.volumeMode || VOLUME_MODE.BLOCK;\n              volumeName = pvcResource?.metadata?.name || '';\n            }\n\n            hotpluggable = volume.persistentVolumeClaim.hotpluggable || false;\n          }\n\n          const bus = DISK?.disk?.bus || DISK?.cdrom?.bus;\n\n          const bootOrder = DISK?.bootOrder ? DISK?.bootOrder : index;\n\n          const parseValue = parseSi(size);\n\n          const formatSize = formatSi(parseValue, {\n            increment:   1024,\n            addSuffix:   false,\n            maxExponent: 3,\n            minExponent: 3,\n          });\n\n          const pvc = this.pvcs.find((P) => P.id === `${ this.value.metadata.namespace }/${ volumeName }`);\n\n          const volumeStatus = pvc?.relatedPV?.metadata?.annotations?.[HCI_ANNOTATIONS.VOLUME_ERROR];\n\n          const isEncrypted = pvc?.isEncrypted || false;\n          const volumeBackups = volBackups?.find((vBackup) => vBackup.volumeName === DISK.name) || null;\n\n          return {\n            id:         randomStr(5),\n            bootOrder,\n            source,\n            name:       DISK.name,\n            realName,\n            bus,\n            volumeName,\n            container,\n            accessMode,\n            size:       `${ formatSize }${ GIBIBYTE }`,\n            volumeMode: volumeMode || this.customVolumeMode,\n            image,\n            type,\n            storageClassName,\n            hotpluggable,\n            volumeStatus,\n            dataSource,\n            namespace,\n            isEncrypted,\n            volumeBackups,\n          };\n        });\n      }\n\n      out = sortBy(out, 'bootOrder');\n\n      return out.filter( (O) => O.name !== 'cloudinitdisk');\n    },\n\n    getNetworkRows(vm, config) {\n      const { fromTemplate = false, init = false } = config;\n\n      const networks = vm.spec.template.spec.networks || [];\n      const interfaces = vm.spec.template.spec.domain.devices.interfaces || [];\n\n      const out = interfaces.map( (I, index) => {\n        const network = networks.find( (N) => I.name === N.name);\n\n        const type = I.sriov ? 'sriov' : I.bridge ? 'bridge' : 'masquerade';\n\n        const isPod = !!network.pod;\n\n        return {\n          ...I,\n          index,\n          type,\n          isPod,\n          newCreateId: (fromTemplate || init) ? randomStr(10) : false,\n          model:       I.model,\n          networkName: isPod ? MANAGEMENT_NETWORK : network?.multus?.networkName,\n        };\n      });\n\n      return out;\n    },\n\n    parseVM() {\n      this.userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n      this.parseOther();\n      this.parseAccessCredentials();\n      this.parseNetworkRows(this.networkRows);\n      this.parseDiskRows(this.diskRows);\n    },\n\n    parseOther() {\n      if (!this.spec.template.spec.domain.machine) {\n        this.spec.template.spec.domain['machine'] = { type: this.machineType };\n      } else {\n        this.spec.template.spec.domain.machine['type'] = this.machineType;\n      }\n\n      this.setCPUAndMemory();\n      // update terminationGracePeriodSeconds\n      this.spec.template.spec.terminationGracePeriodSeconds = this.terminationGracePeriodSeconds;\n\n      const vm = this.resourceType === HCI.VM ? this.value : this.value.spec.vm;\n\n      // parse reserved memory\n      if (!this.reservedMemory) {\n        delete vm.metadata.annotations[HCI_ANNOTATIONS.VM_RESERVED_MEMORY];\n      } else {\n        vm.metadata.annotations[HCI_ANNOTATIONS.VM_RESERVED_MEMORY] = this.reservedMemory;\n      }\n\n      // add or remove cpu memory hotplug annotation\n      if (this.cpuMemoryHotplugEnabled) {\n        vm.metadata.annotations[HCI_ANNOTATIONS.VM_CPU_MEMORY_HOTPLUG] = this.cpuMemoryHotplugEnabled.toString();\n      } else {\n        delete vm.metadata.annotations[HCI_ANNOTATIONS.VM_CPU_MEMORY_HOTPLUG];\n      }\n\n      if (this.maintenanceStrategy === 'Migrate') {\n        delete vm.metadata.labels[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY];\n      } else {\n        vm.metadata.labels[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY] = this.maintenanceStrategy;\n      }\n    },\n\n    setCPUAndMemory() {\n      if (this.cpuMemoryHotplugEnabled) {\n        // set CPU\n        this.spec.template.spec.domain.cpu.sockets = this.cpu;\n        this.spec.template.spec.domain.cpu.cores = 1;\n\n        // set max CPU\n        set(this.spec.template.spec, 'domain.cpu.maxSockets', this.maxCpu);\n        // domain.resources.limits.cpu and memory are defined by k8s which requires string values\n        // see https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/\n        set(this.spec.template.spec, 'domain.resources.limits.cpu', this.maxCpu?.toString());\n\n        // set memory\n        set(this.spec.template.spec, 'domain.memory.guest', this.memory);\n\n        // set max memory\n        set(this.spec.template.spec, 'domain.memory.maxGuest', this.maxMemory);\n        set(this.spec.template.spec, 'domain.resources.limits.memory', this.maxMemory);\n      } else {\n        this.spec.template.spec.domain.cpu.sockets = 1;\n        this.spec.template.spec.domain.cpu.cores = this.cpu;\n        this.spec.template.spec.domain.resources.limits.cpu = this.cpu?.toString();\n        this.spec.template.spec.domain.resources.limits.memory = this.memory;\n        // clean below fields as we don't need them if not enable CPU and memory hotplug\n        if (this.spec?.template?.spec?.domain?.cpu?.maxSockets) {\n          delete this.spec.template.spec.domain.cpu.maxSockets;\n        }\n        if (this.spec?.template?.spec?.domain?.memory?.maxGuest) {\n          delete this.spec.template.spec.domain.memory.maxGuest;\n        }\n      }\n    },\n\n    parseDiskRows(disk) {\n      const disks = [];\n      const volumes = [];\n      const diskNameLables = [];\n      const volumeClaimTemplates = [];\n\n      disk.forEach( (R, index) => {\n        const prefixName = this.value.metadata?.name || '';\n\n        let dataVolumeName = '';\n\n        if (R.source === SOURCE_TYPE.ATTACH_VOLUME) {\n          dataVolumeName = R.volumeName;\n        } else if (this.isClone || !this.hasCreateVolumes.includes(R.realName)) {\n          dataVolumeName = `${ prefixName }-${ R.name }-${ randomStr(5).toLowerCase() }`;\n        } else {\n          dataVolumeName = R.realName;\n        }\n\n        const _disk = this.parseDisk(R, index);\n        const _volume = this.parseVolume(R, dataVolumeName);\n        const _dataVolumeTemplate = this.parseVolumeClaimTemplate(R, dataVolumeName);\n\n        disks.push(_disk);\n        volumes.push(_volume);\n        diskNameLables.push(dataVolumeName);\n\n        if (R.source !== SOURCE_TYPE.CONTAINER) {\n          volumeClaimTemplates.push(_dataVolumeTemplate);\n        }\n      });\n\n      if (this.needNewSecret || !this.secretName) {\n        this.secretName = this.generateSecretName(this.secretNamePrefix);\n      }\n\n      if (!disks.find( (D) => D.name === 'cloudinitdisk') && (this.userData || this.networkData)) {\n        if (!this.isWindows) {\n          disks.push({\n            name: 'cloudinitdisk',\n            disk: { bus: 'virtio' }\n          });\n\n          const userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n\n          const cloudinitdisk = {\n            name:             'cloudinitdisk',\n            cloudInitNoCloud: {}\n          };\n\n          if (this.saveUserDataAsClearText) {\n            cloudinitdisk.cloudInitNoCloud.userData = userData;\n          } else {\n            cloudinitdisk.cloudInitNoCloud.secretRef = { name: this.secretName };\n          }\n\n          if (this.saveNetworkDataAsClearText) {\n            cloudinitdisk.cloudInitNoCloud.networkData = this.networkScript;\n          } else {\n            cloudinitdisk.cloudInitNoCloud.networkDataSecretRef = { name: this.secretName };\n          }\n\n          volumes.push(cloudinitdisk);\n        }\n      }\n\n      let spec = {\n        ...this.spec,\n        runStrategy: this.runStrategy,\n        template:    {\n          ...this.spec.template,\n          metadata: {\n            ...this.spec?.template?.metadata,\n            annotations: {\n              ...this.spec?.template?.metadata?.annotations,\n              [HCI_ANNOTATIONS.SSH_NAMES]: JSON.stringify(this.sshKey)\n            },\n            labels: {\n              ...this.spec?.template?.metadata?.labels,\n              [HCI_ANNOTATIONS.VM_NAME]: this.value?.metadata?.name,\n            }\n          },\n          spec: {\n            ...this.spec.template?.spec,\n            domain: {\n              ...this.spec.template?.spec?.domain,\n              devices: {\n                ...this.spec.template?.spec?.domain?.devices,\n                disks,\n              },\n            },\n            volumes,\n          }\n        }\n      };\n\n      if (volumes.length === 0) {\n        delete spec.template.spec.volumes;\n      }\n\n      if (this.resourceType === HCI.VM) {\n        if (!this.isSingle) {\n          spec = this.multiVMScheduler(spec);\n        }\n\n        this.value.metadata['annotations'] = {\n          ...this.value.metadata.annotations,\n          [HCI_ANNOTATIONS.VOLUME_CLAIM_TEMPLATE]: JSON.stringify(volumeClaimTemplates),\n          [HCI_ANNOTATIONS.NETWORK_IPS]:           JSON.stringify(this.value.networkIps)\n        };\n\n        this.value.metadata['labels'] = {\n          ...this.value.metadata.labels,\n          [HCI_ANNOTATIONS.CREATOR]: 'harvester',\n          [HCI_ANNOTATIONS.OS]:      this.osType\n        };\n\n        this.value['spec'] = spec;\n        this['spec'] = spec;\n      } else if (this.resourceType === HCI.VM_VERSION) {\n        this.value.spec.vm['spec'] = spec;\n        this.value.spec.vm.metadata['annotations'] = {\n          ...this.value.spec.vm.metadata.annotations,\n          [HCI_ANNOTATIONS.VOLUME_CLAIM_TEMPLATE]: JSON.stringify(volumeClaimTemplates),\n        };\n        this.value.spec.vm.metadata['labels'] = {\n          ...this.value.spec.vm.metadata.labels,\n          [HCI_ANNOTATIONS.OS]: this.osType\n        };\n        this['spec'] = spec;\n      }\n    },\n\n    removeTrailingHyphen(str) {\n      while (str.endsWith('-')) {\n        str = str.slice(0, -1);\n      }\n\n      return str;\n    },\n\n    multiVMScheduler(spec) {\n      const namePrefix = this.removeTrailingHyphen(this.namePrefix);\n\n      spec.template.metadata.labels[HCI_ANNOTATIONS.VM_NAME_PREFIX] = namePrefix;\n\n      const rule = {\n        weight:          1,\n        podAffinityTerm: {\n          topologyKey:   HOSTNAME,\n          labelSelector: { matchLabels: { [HCI_ANNOTATIONS.VM_NAME_PREFIX]: namePrefix } }\n        }\n      };\n\n      return {\n        ...spec,\n        template: {\n          ...spec.template,\n          spec: {\n            ...spec.template.spec,\n            affinity: {\n              ...spec.template.spec.affinity,\n              podAntiAffinity: {\n                ...spec.template.spec?.affinity?.podAntiAffinity,\n                preferredDuringSchedulingIgnoredDuringExecution: [\n                  ...(spec.template.spec?.affinity?.podAntiAffinity?.preferredDuringSchedulingIgnoredDuringExecution || []),\n                  rule\n                ]\n              }\n            }\n          }\n        }\n      };\n    },\n\n    parseNetworkRows(networkRow) {\n      const networks = [];\n      const interfaces = [];\n\n      networkRow.forEach( (R) => {\n        const _network = this.parseNetwork(R);\n        const _interface = this.parseInterface(R);\n\n        networks.push(_network);\n        interfaces.push(_interface);\n      });\n\n      const spec = {\n        ...this.spec.template.spec,\n        domain: {\n          ...this.spec.template.spec.domain,\n          devices: {\n            ...this.spec.template.spec.domain.devices,\n            interfaces,\n          },\n        },\n        networks\n      };\n\n      this.spec.template['spec'] = spec;\n    },\n\n    parseAccessCredentials() {\n      const out = [];\n      const annotations = {};\n      const users = JSON.parse(this.spec?.template?.metadata?.annotations?.[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_USERS] || '[]');\n\n      for (const row of this.accessCredentials) {\n        if (this.needNewSecret) {\n          row.secretName = this.generateSecretName(this.secretNamePrefix);\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.RESET_PWD) {\n          users.push(row.username);\n          out.push({\n            userPassword: {\n              source:            { secret: { secretName: row.secretName } },\n              propagationMethod: { qemuGuestAgent: { } }\n            }\n          });\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.INJECT_SSH) {\n          users.push(...row.users);\n          annotations[row.secretName] = row.sshkeys;\n          out.push({\n            sshPublicKey: {\n              source:            { secret: { secretName: row.secretName } },\n              propagationMethod: { qemuGuestAgent: { users: row.users } }\n            }\n          });\n        }\n      }\n\n      if (out.length === 0 && !!this.spec.template.spec.accessCredentials === false) {\n        delete this.spec.template.spec.accessCredentials;\n      } else {\n        this.spec.template.spec.accessCredentials = out;\n      }\n\n      if (users.length !== 0) {\n        this.spec.template.metadata.annotations[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_USERS] = JSON.stringify(Array.from(new Set(users)));\n        this.spec.template.metadata.annotations[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_NAMES] = JSON.stringify(annotations);\n      }\n    },\n\n    getMaintenanceStrategyOptionLabel(opt) {\n      return this.t(`harvester.virtualMachine.maintenanceStrategy.options.${ opt.label || opt }`);\n    },\n\n    getInitUserData(config) {\n      const _QGA_JSON = this.getMatchQGA(config.osType);\n\n      const out = jsyaml.dump(_QGA_JSON);\n\n      return `#cloud-config\\n${ out }`;\n    },\n\n    /**\n     * Generate user data yaml which is decided by the\n     * \"Install guest agent\", \"OS type\", \"SSH keys\" and user input.\n     * @param config\n     */\n    getUserData(config) {\n      try {\n        // https://github.com/eemeli/yaml/issues/136\n        let userDataDoc = this.userScript ? YAML.parseDocument(this.userScript) : YAML.parseDocument({});\n\n        const allSSHAuthorizedKeys = this.mergeSSHAuthorizedKeys(this.userScript);\n\n        if (allSSHAuthorizedKeys.length > 0) {\n          userDataDoc.setIn(['ssh_authorized_keys'], allSSHAuthorizedKeys);\n        } else if (YAML.isCollection(userDataDoc.getIn('ssh_authorized_keys'))) {\n          userDataDoc.deleteIn(['ssh_authorized_keys']);\n        }\n\n        userDataDoc = config.installAgent ? this.mergeQGA({ userDataDoc, ...config }) : this.deleteQGA({ userDataDoc, ...config });\n        const userDataYaml = userDataDoc.toString();\n\n        if (userDataYaml === '{}\\n') {\n          // When the YAML parsed value is '{}\\n', it means that the userData is empty, then undefined is returned.\n          return undefined;\n        }\n\n        const hasCloudComment = this.hasCloudConfigComment(userDataYaml);\n\n        return hasCloudComment ? userDataYaml : `#cloud-config\\n${ userDataYaml }`;\n      } catch (e) {\n        console.error('Error: Unable to parse yaml document', e); // eslint-disable-line no-console\n\n        return this.userScript;\n      }\n    },\n\n    updateSSHKey(neu) {\n      this['sshKey'] = neu;\n    },\n\n    updateCpuMemory(cpu, memory, maxCpu = '', maxMemory = null, cpuMemoryHotplugEnabled = false) {\n      this['cpu'] = cpu;\n      this['memory'] = memory;\n      this['maxCpu'] = maxCpu;\n      this['maxMemory'] = maxMemory;\n      this['cpuMemoryHotplugEnabled'] = cpuMemoryHotplugEnabled;\n    },\n\n    parseDisk(R, index) {\n      const out = { name: R.name };\n\n      if (R.type === HARD_DISK) {\n        out.disk = { bus: R.bus };\n      } else if (R.type === CD_ROM) {\n        out.cdrom = { bus: R.bus };\n      }\n\n      out.bootOrder = index + 1;\n\n      return out;\n    },\n\n    parseVolume(R, dataVolumeName) {\n      const out = { name: R.name };\n\n      if (R.source === SOURCE_TYPE.CONTAINER) {\n        out.containerDisk = { image: R.container };\n      } else if (R.source === SOURCE_TYPE.IMAGE || R.source === SOURCE_TYPE.NEW || R.source === SOURCE_TYPE.ATTACH_VOLUME) {\n        out.persistentVolumeClaim = { claimName: dataVolumeName };\n        if (R.hotpluggable) {\n          out.persistentVolumeClaim.hotpluggable = true;\n        }\n      }\n\n      return out;\n    },\n\n    parseVolumeClaimTemplate(R, dataVolumeName) {\n      if (!String(R.size).includes('Gi') && R.size) {\n        R.size = `${ R.size }${ GIBIBYTE }`;\n      }\n\n      const out = {\n        metadata: { name: dataVolumeName },\n        spec:     {\n          accessModes: [R.accessMode],\n          resources:   { requests: { storage: R.size } },\n          volumeMode:  R.volumeMode\n        }\n      };\n\n      if (R.dataSource) {\n        out.spec.dataSource = R.dataSource;\n      }\n\n      switch (R.source) {\n      case SOURCE_TYPE.ATTACH_VOLUME:\n        out.spec.storageClassName = R.storageClassName;\n        break;\n      case SOURCE_TYPE.NEW:\n        out.spec.storageClassName = R.storageClassName;\n        break;\n      case SOURCE_TYPE.IMAGE: {\n        const image = this.images.find( (I) => R.image === I.id);\n\n        if (image) {\n          out.spec.storageClassName = image.storageClassName;\n          out.metadata.annotations = { [HCI_ANNOTATIONS.IMAGE_ID]: image.id };\n        } else {\n          out.metadata.annotations = { [HCI_ANNOTATIONS.IMAGE_ID]: '' };\n        }\n\n        break;\n      }\n      }\n\n      return out;\n    },\n\n    getSSHListValue(arr) {\n      return arr.map( (id) => this.getSSHValue(id)).filter( (O) => O !== undefined);\n    },\n\n    parseInterface(R) {\n      const _interface = {};\n      const type = R.type;\n\n      _interface[type] = {};\n\n      if (R.macAddress) {\n        _interface.macAddress = R.macAddress;\n      }\n\n      _interface.model = R.model;\n      _interface.name = R.name;\n\n      return _interface;\n    },\n\n    parseNetwork(R) {\n      const out = { name: R.name };\n\n      if (R.isPod) {\n        out.pod = {};\n      } else {\n        out.multus = { networkName: R.networkName };\n      }\n\n      return out;\n    },\n\n    updateUserData(value) {\n      this.userScript = value;\n    },\n\n    updateNetworkData(value) {\n      this.networkScript = value;\n    },\n\n    mergeSSHAuthorizedKeys(yaml) {\n      try {\n        const sshAuthorizedKeys = YAML.parseDocument(yaml)\n          .get('ssh_authorized_keys')\n          ?.toJSON() || [];\n\n        const sshList = this.getSSHListValue(this.sshKey);\n\n        return sshAuthorizedKeys.length ? [...new Set([...sshList, ...sshAuthorizedKeys])] : sshList;\n      } catch (e) {\n        return [];\n      }\n    },\n\n    /**\n     * @param paths A Object path, e.g. 'a.b.c' => ['a', 'b', 'c']. Refer to https://eemeli.org/yaml/#scalar-values\n     * @returns\n     */\n    deleteYamlDocProp(doc, paths) {\n      try {\n        const item = doc.getIn([])?.items[0];\n        const key = item?.key;\n        const hasCloudConfigComment = !!key?.commentBefore?.includes('cloud-config');\n        const isMatchProp = key.source === paths[paths.length - 1];\n\n        if (key && hasCloudConfigComment && isMatchProp) {\n          // Comments are mounted on the next node and we should not delete the node containing cloud-config\n        } else {\n          doc.deleteIn(paths);\n        }\n      } catch (e) {}\n    },\n\n    mergeQGA(config) {\n      const { osType, userDataDoc } = config;\n      const _QGA_JSON = this.getMatchQGA(osType);\n      const userDataYAML = userDataDoc.toString();\n      const userDataJSON = YAML.parse(userDataYAML);\n      let packages = userDataJSON?.packages || [];\n      let runcmd = userDataJSON?.runcmd || [];\n\n      userDataDoc.setIn(['package_update'], true);\n\n      if (Array.isArray(packages)) {\n        if (!packages.includes('qemu-guest-agent')) {\n          packages.push('qemu-guest-agent');\n        }\n      } else {\n        packages = QGA_JSON.packages;\n      }\n\n      if (Array.isArray(runcmd)) {\n        let findIndex = -1;\n        const hasSameRuncmd = runcmd.find( (S) => Array.isArray(S) && S.join('-') === _QGA_JSON.runcmd[0].join('-'));\n\n        const hasSimilarRuncmd = runcmd.find( (S, index) => {\n          if (Array.isArray(S) && S.join('-') === this.getSimilarRuncmd(osType).join('-')) {\n            findIndex = index;\n\n            return true;\n          }\n\n          return false;\n        });\n\n        if (hasSimilarRuncmd) {\n          runcmd[findIndex] = _QGA_JSON.runcmd[0];\n        } else if (!hasSameRuncmd) {\n          runcmd.push(_QGA_JSON.runcmd[0]);\n        }\n      } else {\n        runcmd = _QGA_JSON.runcmd;\n      }\n\n      if (packages.length > 0) {\n        userDataDoc.setIn(['packages'], packages);\n      } else {\n        userDataDoc.setIn(['packages'], []); // It needs to be set empty first, as it is possible that cloud-init comments are mounted on this node\n        this.deleteYamlDocProp(userDataDoc, ['packages']);\n        this.deleteYamlDocProp(userDataDoc, ['package_update']);\n      }\n\n      if (runcmd.length > 0) {\n        userDataDoc.setIn(['runcmd'], runcmd);\n      } else {\n        this.deleteYamlDocProp(userDataDoc, ['runcmd']);\n      }\n\n      return userDataDoc;\n    },\n\n    deleteQGA(config) {\n      const { osType, userDataDoc, deletePackage = false } = config;\n\n      const userDataTemplateValue = this.$store.getters['harvester/byId'](CONFIG_MAP, this.userDataTemplateId)?.data?.cloudInit || '';\n\n      const userDataYAML = userDataDoc.toString();\n      const userDataJSON = YAML.parse(userDataYAML);\n      const packages = userDataJSON?.packages || [];\n      const runcmd = userDataJSON?.runcmd || [];\n\n      if (Array.isArray(packages) && deletePackage) {\n        const templateHasQGAPackage = this.convertToJson(userDataTemplateValue);\n\n        for (let i = 0; i < packages.length; i++) {\n          if (packages[i] === 'qemu-guest-agent') {\n            if (!(Array.isArray(templateHasQGAPackage?.packages) && templateHasQGAPackage.packages.includes('qemu-guest-agent'))) {\n              packages.splice(i, 1);\n            }\n          }\n        }\n      }\n\n      if (Array.isArray(runcmd)) {\n        const _QGA_JSON = this.getMatchQGA(osType);\n\n        for (let i = 0; i < runcmd.length; i++) {\n          if (Array.isArray(runcmd[i]) && runcmd[i].join('-') === _QGA_JSON.runcmd[0].join('-')) {\n            runcmd.splice(i, 1);\n          }\n        }\n      }\n\n      if (packages.length > 0) {\n        userDataDoc.setIn(['packages'], packages);\n      } else {\n        userDataDoc.setIn(['packages'], []);\n        this.deleteYamlDocProp(userDataDoc, ['packages']);\n        this.deleteYamlDocProp(userDataDoc, ['package_update']);\n      }\n\n      if (runcmd.length > 0) {\n        userDataDoc.setIn(['runcmd'], runcmd);\n      } else {\n        this.deleteYamlDocProp(userDataDoc, ['runcmd']);\n      }\n\n      return userDataDoc;\n    },\n\n    generateSecretName(name) {\n      return name ? `${ name }-${ randomStr(5).toLowerCase() }` : undefined;\n    },\n\n    getOwnerReferencesFromVM(resource) {\n      const name = resource.metadata.name;\n      const kind = resource.kind;\n      const apiVersion = this.resourceType === HCI.VM ? 'kubevirt.io/v1' : 'harvesterhci.io/v1beta1';\n      const uid = resource?.metadata?.uid;\n\n      return [{\n        name,\n        kind,\n        uid,\n        apiVersion,\n      }];\n    },\n\n    async saveSecret(vm) {\n      if (!vm?.spec || !this.secretName || this.isWindows) {\n        return true;\n      }\n\n      let secret = this.getSecret(vm.spec);\n\n      if (!secret && this.isEdit && this.secretRef) {\n        // When editing the vm, if the userData and networkData are deleted, we also need to clean up the secret values\n        secret = this.secretRef;\n      }\n\n      if (!secret || this.needNewSecret) {\n        secret = await this.$store.dispatch('harvester/create', {\n          metadata: {\n            name:            this.secretName,\n            namespace:       this.value.metadata.namespace,\n            labels:          { [HCI_ANNOTATIONS.CLOUD_INIT]: 'harvester' },\n            ownerReferences: this.getOwnerReferencesFromVM(vm)\n          },\n          type: SECRET\n        });\n      }\n\n      try {\n        if (secret) {\n          // If none of the data comes from the secret, then no data needs to be saved to the secret\n          if (!this.saveUserDataAsClearText || !this.saveNetworkDataAsClearText) {\n            secret.setData('userdata', this.userData || '');\n            secret.setData('networkdata', this.networkScript || '');\n            await secret.save();\n          }\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n\n    async saveAccessCredentials(vm) {\n      if (!vm?.spec) {\n        return true;\n      }\n\n      // save\n      const toSave = [];\n\n      for (const row of this.accessCredentials) {\n        let secretRef = row.secretRef;\n\n        if (!secretRef || this.needNewSecret) {\n          secretRef = await this.$store.dispatch('harvester/create', {\n            metadata: {\n              name:            row.secretName,\n              namespace:       vm.metadata.namespace,\n              labels:          { [HCI_ANNOTATIONS.CLOUD_INIT]: 'harvester' },\n              ownerReferences: this.getOwnerReferencesFromVM(vm)\n            },\n            type: SECRET\n          });\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.RESET_PWD) {\n          secretRef.setData(row.username, row.newPassword);\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.INJECT_SSH) {\n          for (const secretId of row.sshkeys) {\n            const keypair = (this.$store.getters['harvester/all'](HCI.SSH) || []).find((s) => s.id === secretId);\n\n            secretRef.setData(`${ keypair.metadata.namespace }-${ keypair.metadata.name }`, keypair.spec.publicKey);\n          }\n        }\n\n        toSave.push(secretRef);\n      }\n\n      try {\n        for (const resource of toSave) {\n          await resource.save();\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n\n    getCPUMemoryValidation() {\n      const errors = [];\n      const { cpu, memory } = this;\n\n      if ((!cpu)) {\n        errors.push(this.t('validation.required', { key: this.t('harvester.virtualMachine.input.cpu') }, true));\n      }\n\n      if ((!memory)) {\n        errors.push(this.t('validation.required', { key: this.t('harvester.virtualMachine.input.memory') }, true));\n      }\n\n      return errors;\n    },\n\n    getAccessCredentialsValidation() {\n      const errors = [];\n\n      for (let i = 0; i < this.accessCredentials.length; i++) {\n        const row = this.accessCredentials[i];\n        const source = row.source;\n\n        if (source === ACCESS_CREDENTIALS.RESET_PWD) {\n          if (!row.username) {\n            const fieldName = this.t('harvester.virtualMachine.input.username');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (!row.newPassword) {\n            const fieldName = this.t('harvester.virtualMachine.input.password');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (row.newPassword && row.newPassword.length < 6) {\n            const fieldName = this.t('harvester.virtualMachine.input.password');\n            const message = this.t('validation.number.min', { key: fieldName, val: '6' });\n\n            errors.push(message);\n          }\n        } else {\n          if (!row.users || row.users.length === 0) {\n            const fieldName = this.t('harvester.virtualMachine.input.username');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (!row.sshkeys || row.sshkeys.length === 0) {\n            const fieldName = this.t('harvester.virtualMachine.input.sshKeyValue');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n        }\n\n        if (errors.length > 0) {\n          break;\n        }\n      }\n\n      return errors;\n    },\n\n    getHasCreatedVolumes(spec) {\n      const out = [];\n\n      if (spec.template.spec.volumes) {\n        spec.template.spec.volumes.forEach((V) => {\n          if (V?.persistentVolumeClaim?.claimName) {\n            out.push(V.persistentVolumeClaim.claimName);\n          }\n        });\n      }\n\n      return out;\n    },\n\n    handlerUSBTablet(val) {\n      const hasExist = this.isInstallUSBTablet(this.spec);\n      const inputs = this.spec.template.spec.domain.devices?.inputs || [];\n\n      if (val && !hasExist) {\n        if (inputs.length > 0) {\n          inputs.push(USB_TABLET[0]);\n        } else {\n          Object.assign(this.spec.template.spec.domain.devices, {\n            inputs: [\n              USB_TABLET[0]\n            ]\n          });\n        }\n      } else if (!val) {\n        const index = inputs.findIndex((O) => isEqual(O, USB_TABLET[0]));\n\n        if (hasExist && inputs.length === 1) {\n          delete this.spec.template.spec.domain.devices['inputs'];\n        } else if (hasExist) {\n          inputs.splice(index, 1);\n          this.spec.template.spec.domain.devices['inputs'] = inputs;\n        }\n      }\n    },\n\n    setBootMethod(boot = {\n      efi: false, secureBoot: false, efiPersistentStateEnabled: false\n    }) {\n      if (boot.efi) {\n        set(this.spec.template.spec.domain, 'firmware.bootloader.efi.secureBoot', boot.secureBoot);\n      } else {\n        delete this.spec.template.spec.domain['firmware'];\n        delete this.spec.template.spec.domain.features['smm'];\n\n        return;\n      }\n\n      if (boot.secureBoot) {\n        set(this.spec.template.spec.domain, 'features.smm.enabled', true);\n      } else {\n        try {\n          delete this.spec.template.spec.domain.features.smm['enabled'];\n          const noKeys = Object.keys(this.spec.template.spec.domain.features.smm).length === 0;\n\n          if (noKeys) {\n            delete this.spec.template.spec.domain.features['smm'];\n          }\n        } catch (e) {}\n      }\n\n      if (boot.efiPersistentStateEnabled) {\n        set(this.spec.template.spec.domain, 'firmware.bootloader.efi.persistent', true);\n      } else {\n        delete this.spec.template.spec.domain.firmware.bootloader.efi['persistent'];\n      }\n    },\n\n    setCpuPinning(value) {\n      if (value) {\n        set(this.spec.template.spec.domain.cpu, 'dedicatedCpuPlacement', true);\n      } else {\n        delete this.spec.template.spec.domain.cpu['dedicatedCpuPlacement'];\n      }\n    },\n\n    setTPM({ tpmEnabled = false, tpmPersistentStateEnabled = false } = {}) {\n      if (tpmEnabled) {\n        set(this.spec.template.spec.domain.devices, 'tpm', tpmPersistentStateEnabled ? { persistent: true } : {});\n      } else {\n        delete this.spec.template.spec.domain.devices['tpm'];\n      }\n    },\n\n    deleteSSHFromUserData(ssh = []) {\n      const sshAuthorizedKeys = this.getSSHFromUserData(this.userScript);\n\n      ssh.map((id) => {\n        const index = sshAuthorizedKeys.findIndex((value) => value === this.getSSHValue(id));\n\n        if (index >= 0) {\n          sshAuthorizedKeys.splice(index, 1);\n        }\n      });\n      const userDataJson = this.convertToJson(this.userScript);\n\n      userDataJson.ssh_authorized_keys = sshAuthorizedKeys;\n\n      if (sshAuthorizedKeys.length === 0) {\n        delete userDataJson.ssh_authorized_keys;\n      }\n\n      if (isEmpty(userDataJson)) {\n        this['userScript'] = undefined;\n      } else {\n        this['userScript'] = jsyaml.dump(userDataJson);\n      }\n\n      this.refreshYamlEditor();\n    },\n\n    refreshYamlEditor() {\n      this.$nextTick(() => {\n        this.$refs.yamlEditor?.updateValue();\n      });\n    },\n\n    toggleAdvanced() {\n      this.showAdvanced = !this.showAdvanced;\n    },\n\n    updateAgent(value) {\n      if (!value) {\n        this.deletePackage = true;\n      }\n    },\n\n    updateDataTemplateId(type, id) {\n      if (type === 'user') {\n        const oldInstallAgent = this.installAgent;\n\n        this.userDataTemplateId = id;\n        this.$nextTick(() => {\n          if (oldInstallAgent) {\n            this.installAgent = oldInstallAgent;\n          }\n        });\n      }\n    },\n\n    updateReserved(value = {}) {\n      const { memory } = value;\n\n      this['reservedMemory'] = memory;\n    },\n\n    updateTerminationGracePeriodSeconds(value) {\n      this['terminationGracePeriodSeconds'] = value;\n    },\n  },\n\n  watch: {\n    diskRows: {\n      handler(neu, old) {\n        if (Array.isArray(neu)) {\n          const imageId = neu[0]?.image;\n          const image = this.images.find( (I) => imageId === I.id);\n          const osType = image?.imageOSType;\n\n          const oldImageId = old[0]?.image;\n\n          if (this.isCreate && oldImageId === imageId && imageId) {\n            this.osType = osType;\n          }\n        }\n      }\n    },\n\n    secretRef: {\n      handler(secret) {\n        if (secret && this.resourceType !== HCI.BACKUP) {\n          this.secretName = secret?.metadata.name;\n        }\n      },\n      immediate: true,\n      deep:      true\n    },\n\n    isWindows(val) {\n      if (val) {\n        this['sshKey'] = [];\n        this['userScript'] = undefined;\n        this['networkScript'] = undefined;\n        this['installAgent'] = false;\n      }\n    },\n\n    installUSBTablet(val) {\n      this.handlerUSBTablet(val);\n    },\n\n    efiEnabled(val) {\n      this.setBootMethod({\n        efi: val, secureBoot: this.secureBoot, efiPersistentStateEnabled: this.efiPersistentStateEnabled\n      });\n    },\n\n    secureBoot(val) {\n      this.setBootMethod({\n        efi: this.efiEnabled, secureBoot: val, efiPersistentStateEnabled: this.efiPersistentStateEnabled\n      });\n    },\n\n    efiPersistentStateEnabled(val) {\n      this.setBootMethod({\n        efi: this.efiEnabled, secureBoot: this.secureBoot, efiPersistentStateEnabled: val\n      });\n    },\n\n    cpuPinning(value) {\n      this.setCpuPinning(value);\n    },\n\n    tpmEnabled(val) {\n      this.setTPM({ tpmEnabled: val, tpmPersistentStateEnabled: this.tpmPersistentStateEnabled });\n    },\n\n    tpmPersistentStateEnabled(val) {\n      this.setTPM({ tpmEnabled: this.tpmEnabled, tpmPersistentStateEnabled: val });\n    },\n\n    installAgent: {\n      /**\n       * rules\n       * 1. The value in user Data is the first priority\n       * 2. After selecting the template, if checkbox is checked, only merge operation will be performed on user data,\n       *    if checkbox is unchecked, no value will be deleted in user data\n       */\n      handler(neu) {\n        if (this.deleteAgent) {\n          this['userScript'] = this.getUserData({\n            installAgent: neu, osType: this.osType, deletePackage: this.deletePackage\n          });\n          this.refreshYamlEditor();\n        }\n        this.deleteAgent = true;\n        this.deletePackage = false;\n      }\n    },\n\n    osType(neu, old) {\n      this.installAgent = old === 'windows' ? true : this.installAgent;\n      const out = old === 'windows' ? this.getInitUserData({ osType: neu }) : this.getUserData({ installAgent: this.installAgent, osType: neu });\n\n      this['userScript'] = out;\n      this.refreshYamlEditor();\n    },\n\n    userScript(neu, old) {\n      const hasInstallAgent = this.hasInstallAgent(neu, this.osType, this.installAgent);\n\n      if (hasInstallAgent !== this.installAgent) {\n        this.deleteAgent = false;\n        this.installAgent = hasInstallAgent;\n      }\n    },\n\n    sshKey(neu, old) {\n      const _diff = difference(old, neu);\n\n      // delete removed ssh key in userdata if needed\n      if (_diff.length > 0 && this.isCreate) {\n        this.deleteSSHFromUserData(_diff);\n      }\n\n      // refresh yaml editor to get the latest userScript\n      this.userScript = this.getUserData({ installAgent: this.installAgent, osType: this.osType });\n      this.refreshYamlEditor();\n    }\n  }\n};\n"],"names":["QGA_JSON","package_update","packages","runcmd","QGA_MAP","default","USB_TABLET","bus","name","type","SSH_EXISTING_TYPE","EXISTING_ALL","EXISTING_ONLY_ANNOTATION","EXISTING_ONLY_CLOUD","methods","hasCloudConfigComment","userScript","userDataDoc","YAML","items","contents","exist","comment","includes","commentBefore","map","item","key","getSSHValue","id","inStore","this","$store","getters","sshs","HCI","SSH","find","O","spec","publicKey","undefined","getOsType","vm","metadata","labels","HCI_ANNOTATIONS","OS","getMatchQGA","osType","_QGA_JSON","clone","hasCustomQGA","forEach","match","getSimilarRuncmd","hasInstallAgent","oldValue","dataFormat","jsyaml","e","Error","S","Array","isArray","join","isInstallUSBTablet","inputs","template","domain","devices","isEqual","isEfiEnabled","firmware","bootloader","efi","isTpmEnabled","tpm","isTPMPersistentStateEnabled","persistent","isEFIPersistentStateEnabled","isSecureBoot","secureBoot","isCpuPinning","cpu","dedicatedCpuPlacement","getCloudInitNoCloud","secret","getSecret","userData","decodedData","userdata","networkData","networkdata","cloudInitNoCloud","volumes","V","saveUserDataAsClearText","saveNetworkDataAsClearText","secrets","SECRET","secretName","secretRef","networkDataSecretRef","s","getAccessCredentials","credentials","accessCredentials","annotations","JSON","parse","DYNAMIC_SSHKEYS_NAMES","c","source","userPassword","out","username","newPassword","users","sshkeys","Object","keys","data","propagationMethod","qemuGuestAgent","getRootImageId","parseVolumeClaimTemplates","IMAGE_ID","getSSHFromAnnotation","ids","SSH_NAMES","convertToJson","script","getSSHFromUserData","ssh_authorized_keys","compareSSHValue","a","b","r","replace","mergeAllSSHs","length","allSSHs","hasSSHResource","ssh","_userDataSSH","sshValue","push","LONGHORN_V2_DATA_ENGINE","MANAGEMENT_NETWORK","label","value","CD_ROM","HARD_DISK","mixins","impl","props","required","resourceType","String","fetch","hash","pvs","dispatch","PV","pvcs","PVC","storageClasses","STORAGE_CLASS","settings","SETTING","images","IMAGE","versions","VM_VERSION","templates","VM_TEMPLATE","networkAttachment","NETWORK_ATTACHMENT","vmis","VMI","vmims","VMIM","vms","VM","addons","ADD_ONS","longhornV2Engine","LONGHORN","SETTINGS","NODE","nodes","CLUSTER_NETWORK","clusterNetworks","VLAN_CONFIG","VOLUMES","longhornVolumes","res","allHash","hasPCISchema","PCI_DEVICE","hasSRIOVGPUSchema","SR_IOVGPU_DEVICE","enabledAddons","reduce","acc","addon","enabled","enabledPCI","PCI_DEVICE_CONTROLLER","enabledSriovgpu","NVIDIA_DRIVER_TOOLKIT_CONTROLLER","isClone","realMode","_CLONE","showYaml","sshKey","maintenanceStrategies","maintenanceStrategy","runStrategies","runStrategy","installAgent","hasCreateVolumes","installUSBTablet","networkScript","imageId","diskRows","networkRows","machineType","machineTypes","showAdvanced","deleteAgent","memory","maxMemory","maxCpu","cpuMemoryHotplugEnabled","reservedMemory","efiEnabled","tpmEnabled","tpmPersistentStateEnabled","efiPersistentStateEnabled","userDataTemplateId","immutableMode","_CREATE","_VIEW","terminationGracePeriodSeconds","cpuPinning","computed","filteredNamespaces","NAMESPACE","filter","namespace","isSystem","nodesIdOptions","networkNames","n","networkName","vmNetworks","selectedVMNetworks","uniq","clusterNetworkResource","N","isUnSchedulable","isEtcd","node","requireLabelKeys","isNetworkSchedule","clusterNetwork","requireLabelKey","nameDisplay","t","disabled","storageClassSetting","storageClassValue","HCI_SETTING","DEFAULT_STORAGE_CLASS","customVolumeMode","volumeMode","VOLUME_MODE","BLOCK","customAccessMode","accessModes","isWindows","needNewSecret","isCreate","defaultTerminationSetting","setting","VM_TERMINATION_PERIOD","Number","affinityLabels","namespaceInputLabel","namespaceSelectionLabels","addLabel","topologyKeyPlaceholder","created","vmMachineTypesFeatureEnabled","url","err","getInitConfig","init","config","existUserData","fromTemplate","BACKUP","status","volumeBackups","resources","limits","requests","VM_MAINTENANCE_MODE_STRATEGY","machine","isHotplugEnabled","getVmCPUMemoryValues","VM_RESERVED_MEMORY","getDiskRows","getNetworkRows","getHasCreatedVolumes","secretBackups","secretNetworkData","secretUserData","base64Decode","getInitUserData","prototype","hasOwnProperty","call","running","refreshYamlEditor","volBackups","_volumes","_disks","disks","_volumeClaimTemplates","size","imageResource","I","isIsoImage","test","imageSuffix","imageSize","Math","max","virtualSize","isEncrypted","vBackup","volumeName","imageSizeGiB","ceil","GIBIBYTE","randomStr","SOURCE_TYPE","accessMode","storageClassName","image","DISK","index","volume","realName","container","hotpluggable","dataSource","cdrom","disk","containerDisk","CONTAINER","persistentVolumeClaim","claimName","DVT","T","NEW","dataVolumeSpecPVC","storage","allPVCs","pvcResource","ATTACH_VOLUME","bootOrder","parseValue","parseSi","formatSize","formatSi","increment","addSuffix","maxExponent","minExponent","pvc","P","volumeStatus","relatedPV","VOLUME_ERROR","sortBy","networks","interfaces","network","sriov","bridge","isPod","pod","newCreateId","model","multus","parseVM","getUserData","parseOther","parseAccessCredentials","parseNetworkRows","parseDiskRows","setCPUAndMemory","VM_CPU_MEMORY_HOTPLUG","toString","sockets","cores","set","maxSockets","maxGuest","diskNameLables","volumeClaimTemplates","R","prefixName","dataVolumeName","toLowerCase","_disk","parseDisk","_volume","parseVolume","_dataVolumeTemplate","parseVolumeClaimTemplate","generateSecretName","secretNamePrefix","D","cloudinitdisk","stringify","VM_NAME","isSingle","multiVMScheduler","VOLUME_CLAIM_TEMPLATE","NETWORK_IPS","networkIps","CREATOR","removeTrailingHyphen","str","endsWith","slice","namePrefix","VM_NAME_PREFIX","rule","weight","podAffinityTerm","topologyKey","HOSTNAME","labelSelector","matchLabels","affinity","podAntiAffinity","preferredDuringSchedulingIgnoredDuringExecution","networkRow","_network","parseNetwork","_interface","parseInterface","DYNAMIC_SSHKEYS_USERS","row","ACCESS_CREDENTIALS","RESET_PWD","INJECT_SSH","sshPublicKey","from","Set","getMaintenanceStrategyOptionLabel","opt","allSSHAuthorizedKeys","mergeSSHAuthorizedKeys","setIn","getIn","deleteIn","mergeQGA","deleteQGA","userDataYaml","hasCloudComment","console","error","updateSSHKey","neu","updateCpuMemory","getSSHListValue","arr","macAddress","updateUserData","updateNetworkData","yaml","sshAuthorizedKeys","get","toJSON","sshList","deleteYamlDocProp","doc","paths","isMatchProp","userDataYAML","userDataJSON","findIndex","hasSameRuncmd","hasSimilarRuncmd","deletePackage","userDataTemplateValue","CONFIG_MAP","cloudInit","templateHasQGAPackage","i","splice","getOwnerReferencesFromVM","resource","kind","apiVersion","uid","saveSecret","isEdit","CLOUD_INIT","ownerReferences","setData","save","Promise","reject","saveAccessCredentials","toSave","secretId","keypair","getCPUMemoryValidation","errors","getAccessCredentialsValidation","fieldName","message","val","handlerUSBTablet","hasExist","assign","setBootMethod","boot","features","smm","noKeys","setCpuPinning","setTPM","deleteSSHFromUserData","userDataJson","isEmpty","$nextTick","$refs","yamlEditor","updateValue","toggleAdvanced","updateAgent","updateDataTemplateId","oldInstallAgent","updateReserved","updateTerminationGracePeriodSeconds","watch","handler","old","imageOSType","oldImageId","immediate","deep","_diff","difference"],"sourceRoot":""}